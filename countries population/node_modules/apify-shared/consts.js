"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MARKETPLACE_USER_ROLES = exports.FINISHED_PROJECT_STATUSES = exports.PROJECT_STATUSES = exports.SOURCE_FILE_FORMATS = exports.MAX_MULTIFILE_BYTES = exports.APIFY_UI_CLIENT_KEY = exports.WEBHOOK_ALLOWED_PAYLOAD_VARIABLES = exports.WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE = exports.WEBHOOK_EVENT_TYPE_GROUPS = exports.WEBHOOK_EVENT_TYPES = exports.USER_BASIC_TEXT_XSS_OPTIONS = exports.VERSION_INT_MINOR_BASE = exports.VERSION_INT_MAJOR_BASE = exports.ACTOR_CATEGORIES = exports.MAX_PAYLOAD_SIZE_BYTES = exports.CUSTOMER_REQUEST_TYPES = exports.ACTOR_LOG_MAX_CHARS = exports.KEY_VALUE_STORE_KEYS = exports.LOCAL_ENV_VARS = exports.LOCAL_STORAGE_SUBDIRS = exports.DEFAULT_CONTAINER_PORT = exports.INTEGER_ENV_VARS = exports.ENV_VARS = exports.MONGO_INC_THROTTLED_INTERVAL_MILLIS = exports.REQUEST_QUEUE_HEAD_MAX_LIMIT = exports.ME_USER_NAME_PLACEHOLDER = exports.DEFAULT_PLATFORM_LIMITS = exports.ACTOR_LIMITS = exports.COMPUTE_UNIT_MILLIS = exports.COMPUTE_UNIT_MB = exports.ACT_RESTART_ON_ERROR = exports.ACTOR_RESTART_ON_ERROR = exports.BUILD_TAG_LATEST = exports.SHORT_CRAWLER_ID_LENGTH = exports.ACTOR_NAME = exports.USERNAME = exports.ANONYMOUS_USERNAME = exports.ACT_TYPES = exports.DOCKER_LABELS = exports.ACTOR_BASE_DOCKER_IMAGE_DEFAULT = exports.ACTOR_BASE_DOCKER_IMAGES = exports.META_ORIGINS = exports.WORKER_SERVICE_TYPES = exports.ACT_JOB_TERMINAL_STATUSES = exports.ACT_JOB_STATUSES = exports.ACTOR_EVENT_NAMES = exports.ACT_SOURCE_TYPES = exports.ACT_JOB_TYPES = exports.FREE_SUBSCRIPTION_PLAN_CODE = void 0;

var _regexs = require("./regexs");

const FREE_SUBSCRIPTION_PLAN_CODE = 'DEV';
exports.FREE_SUBSCRIPTION_PLAN_CODE = FREE_SUBSCRIPTION_PLAN_CODE;
const ACT_JOB_TYPES = {
  BUILD: 'BUILD',
  RUN: 'RUN'
};
exports.ACT_JOB_TYPES = ACT_JOB_TYPES;
const ACT_SOURCE_TYPES = {
  SOURCE_CODE: 'SOURCE_CODE',
  SOURCE_FILES: 'SOURCE_FILES',
  GIT_REPO: 'GIT_REPO',
  TARBALL: 'TARBALL',
  GITHUB_GIST: 'GITHUB_GIST'
};
exports.ACT_SOURCE_TYPES = ACT_SOURCE_TYPES;
const ACTOR_EVENT_NAMES = {
  CPU_INFO: 'cpuInfo',
  SYSTEM_INFO: 'systemInfo',
  MIGRATING: 'migrating',
  PERSIST_STATE: 'persistState'
};
/**
 * Dictionary of possible values for 'status' field of act2Builds or act2Runs collections.
 */

exports.ACTOR_EVENT_NAMES = ACTOR_EVENT_NAMES;
const ACT_JOB_STATUSES = {
  READY: 'READY',
  // started but not allocated to any worker yet
  RUNNING: 'RUNNING',
  // running on worker
  SUCCEEDED: 'SUCCEEDED',
  // finished and all good
  FAILED: 'FAILED',
  // run or build failed
  TIMING_OUT: 'TIMING-OUT',
  // timing out now
  TIMED_OUT: 'TIMED-OUT',
  // timed out
  ABORTING: 'ABORTING',
  // being aborted by user
  ABORTED: 'ABORTED' // aborted by user

};
/**
 * An array of act jobs statuses that are final for the jobs.
 */

exports.ACT_JOB_STATUSES = ACT_JOB_STATUSES;
const ACT_JOB_TERMINAL_STATUSES = [ACT_JOB_STATUSES.SUCCEEDED, ACT_JOB_STATUSES.FAILED, ACT_JOB_STATUSES.TIMED_OUT, ACT_JOB_STATUSES.ABORTED]; // NOTE: for legacy reasons these are lower-case, maybe we should migrate to upper case later.
// these strings are also referenced from upstart-worker.conf !

exports.ACT_JOB_TERMINAL_STATUSES = ACT_JOB_TERMINAL_STATUSES;
const WORKER_SERVICE_TYPES = {
  CRAWLING: 'crawling',
  ACTOR: 'actor'
};
exports.WORKER_SERVICE_TYPES = WORKER_SERVICE_TYPES;
const META_ORIGINS = {
  DEVELOPMENT: 'DEVELOPMENT',
  // Job started from Developer console in Source section of actor
  WEB: 'WEB',
  // Job started from other place on the website (either console or task detail page)
  API: 'API',
  // Job started through API
  SCHEDULER: 'SCHEDULER',
  // Job started through Scheduler
  TEST: 'TEST' // Job started through test actor page

};
/**
 * Base Docker images for acts, in order in which they are displayed in UI.
 * See https://www.apify.com/docs/actor#base-images
 */

exports.META_ORIGINS = META_ORIGINS;
const ACTOR_BASE_DOCKER_IMAGES = [// Latest:
{
  name: 'apify/actor-node-basic',
  displayName: 'Node.js 12 on Alpine Linux',
  prePull: true
}, {
  name: 'apify/actor-node-chrome',
  displayName: 'Node.js 12 + Chrome on Debian',
  copyChown: 'myuser:myuser',
  prePull: true
}, {
  name: 'apify/actor-node-chrome-xvfb',
  displayName: 'Node.js 12 + Chrome + Xvfb on Debian',
  copyChown: 'myuser:myuser',
  prePull: true
}, // Beta:
{
  name: 'apify/actor-node-basic:beta',
  displayName: 'BETA: Node.js 12 on Alpine Linux'
}, {
  name: 'apify/actor-node-chrome:beta',
  displayName: 'BETA: Node.js 12 + Chrome on Debian',
  copyChown: 'myuser:myuser'
}, {
  name: 'apify/actor-node-chrome-xvfb:beta',
  displayName: 'BETA: Node.js 12 + Chrome + Xvfb on Debian',
  copyChown: 'myuser:myuser'
}, // Deprecated:
// TODO: Keep the for some time and then migrate acts to recommended images.
{
  name: 'apify/actor-node-puppeteer',
  displayName: '[DEPRECATED] Node.js 12 + Puppeteer on Debian - use apify/actor-node-chrome instead!',
  copyChown: 'node:node',
  prePull: true
}, {
  name: 'apify/actor-node-puppeteer:beta',
  displayName: '[DEPRECATED] BETA: Node.js 12 + Puppeteer on Debian - use apify/actor-node-chrome:beta instead!',
  copyChown: 'node:node'
}, // These are here because we made breaking changes in the client that could break existing single file actors.
// We will get a rid of this along with the whole single file logic.
{
  name: 'apify/actor-node-basic:v0.21.10',
  displayName: '[DEPRECATED]: Node.js 12 on Alpine Linux (Apify SDK v0.21.10)'
}, {
  name: 'apify/actor-node-chrome:v0.21.10',
  displayName: '[DEPRECATED]: Node.js 12 + Chrome on Debian (Apify SDK v0.21.10)',
  copyChown: 'myuser:myuser'
}, {
  name: 'apify/actor-node-chrome-xvfb:v0.21.10',
  displayName: '[DEPRECATED]: Node.js 12 + Chrome + Xvfb on Debian (Apify SDK v0.21.10)',
  copyChown: 'myuser:myuser'
}];
/**
 * Default image from ACTOR_BASE_DOCKER_IMAGES.
 */

exports.ACTOR_BASE_DOCKER_IMAGES = ACTOR_BASE_DOCKER_IMAGES;
const ACTOR_BASE_DOCKER_IMAGE_DEFAULT = ACTOR_BASE_DOCKER_IMAGES[0].name;
/**
 * Keys of labels applied to act Docker images and containers.
 */

exports.ACTOR_BASE_DOCKER_IMAGE_DEFAULT = ACTOR_BASE_DOCKER_IMAGE_DEFAULT;
const DOCKER_LABELS = {
  ACTOR_BUILD_ID: 'com.apify.actBuildId',
  ACTOR_RUN_ID: 'com.apify.actRunId',
  // Kept for backwards compatibility, will be removed soon
  ACT_BUILD_ID: 'com.apify.actBuildId',
  ACT_RUN_ID: 'com.apify.actRunId'
};
/**
 * Acts types
 */

exports.DOCKER_LABELS = DOCKER_LABELS;
const ACT_TYPES = {
  ACT: 'acts',
  CRAWLER: 'crawlers'
};
/**
 * Username used when user is anonymous.
 */

exports.ACT_TYPES = ACT_TYPES;
const ANONYMOUS_USERNAME = 'anonymous';
/**
 * Username constraints.
 */

exports.ANONYMOUS_USERNAME = ANONYMOUS_USERNAME;
const USERNAME = {
  MIN_LENGTH: 3,
  MAX_LENGTH: 30,
  // Regex matching a potentially allowed username. The numbers must match MIN and MAX!
  // Note that username must also pass isForbiddenUser() test to be allowed!
  REGEX: /^[a-zA-Z0-9_.-]{3,30}$/
};
/**
 * Actor name constraints.
 */

exports.USERNAME = USERNAME;
const ACTOR_NAME = {
  MIN_LENGTH: 3,
  MAX_LENGTH: 30,
  REGEX: _regexs.DNS_SAFE_NAME_REGEX
};
/**
 * Length of short crawler ID for nice public crawlers path.
 */

exports.ACTOR_NAME = ACTOR_NAME;
const SHORT_CRAWLER_ID_LENGTH = 5;
/**
 * Default build tag used for latest act version.
 */

exports.SHORT_CRAWLER_ID_LENGTH = SHORT_CRAWLER_ID_LENGTH;
const BUILD_TAG_LATEST = 'latest';
/**
 * Behaviour of act restart on error.
 * Act gets restarted when there are less than MAX_RESTARTS in the last INTERVAL_MILLIS.
 */

exports.BUILD_TAG_LATEST = BUILD_TAG_LATEST;
const ACTOR_RESTART_ON_ERROR = {
  MAX_RESTARTS: 3,
  // This needs to be low enough so that it only covers restart loops, rather than e.g.
  // errors during crawling of large lists of URLs
  INTERVAL_MILLIS: 1 * 60 * 1000
};
/**
 * Kept for backwards compatibility, will be removed soon.
 * TODO: Remove this once it's no longer used anywhere.
 */

exports.ACTOR_RESTART_ON_ERROR = ACTOR_RESTART_ON_ERROR;
const ACT_RESTART_ON_ERROR = ACTOR_RESTART_ON_ERROR;
/**
 * 1 compute unit = 1GB * 1Hour.
 */

exports.ACT_RESTART_ON_ERROR = ACT_RESTART_ON_ERROR;
const COMPUTE_UNIT_MB = 1024;
exports.COMPUTE_UNIT_MB = COMPUTE_UNIT_MB;
const COMPUTE_UNIT_MILLIS = 60 * 60 * 1000;
/**
 * Contains various Actor platform limits that are shared between the projects.
 * IMPORTANT: If you update any of them, update also https://github.com/apifytech/apify-docs/edit/master/docs/actor/limits.md !!!
 */

exports.COMPUTE_UNIT_MILLIS = COMPUTE_UNIT_MILLIS;
const ACTOR_LIMITS = {
  // Total amount of memory for the build container. Must be less than or equal to the maximum of the free plan!
  BUILD_DEFAULT_MEMORY_MBYTES: 1024,
  // Maximum duration of build in seconds.
  BUILD_TIMEOUT_SECS: 600,
  // For each build or run container, set disk quota based on memory size
  RUN_DISK_TO_MEMORY_SIZE_COEFF: 2,
  // For each build or run container, set CPU cores based on memory size
  RUN_MEMORY_MBYTES_PER_CPU_CORE: 4096,
  // The default limit of memory for all running Actor jobs for free accounts.
  FREE_ACCOUNT_MAX_MEMORY_MBYTES: 8192,
  // The default limit of memory for all running Actor jobs for paid accounts.
  PAID_ACCOUNT_MAX_MEMORY_MBYTES: 65536,
  // Minimum and maximum memory for a single act run.
  MIN_RUN_MEMORY_MBYTES: 128,
  MAX_RUN_MEMORY_MBYTES: 32768,
  // Maximum size of actor input schema.
  INPUT_SCHEMA_MAX_BYTES: 100 * 1024,
  // Max length of run/build log in number of characters
  LOG_MAX_CHARS: 5000000
};
/**
 * Contains various limits of the Apify platform.
 */

exports.ACTOR_LIMITS = ACTOR_LIMITS;
const DEFAULT_PLATFORM_LIMITS = {
  // Maximum number of actors per user
  MAX_ACTORS_PER_USER: 100,
  // Maximum number of tasks per user
  MAX_TASKS_PER_USER: 1000,
  // Maximum number of schedules per user
  MAX_SCHEDULES_PER_USER: 100,
  // Maximum number of webhooks per user
  MAX_WEBHOOKS_PER_USER: 100,
  // Maximum number of actors per scheduler
  MAX_ACTORS_PER_SCHEDULER: 10,
  // Maximum number of tasks per scheduler
  MAX_TASKS_PER_SCHEDULER: 10
};
/**
 * Use as username for returning user own info from API v2/users/username
 */

exports.DEFAULT_PLATFORM_LIMITS = DEFAULT_PLATFORM_LIMITS;
const ME_USER_NAME_PLACEHOLDER = 'me';
/**
 * Max length of the queue head that server will return in Request Queue API.
 */

exports.ME_USER_NAME_PLACEHOLDER = ME_USER_NAME_PLACEHOLDER;
const REQUEST_QUEUE_HEAD_MAX_LIMIT = 1000;
/**
 * Throttling period for mongo increment updates
 */

exports.REQUEST_QUEUE_HEAD_MAX_LIMIT = REQUEST_QUEUE_HEAD_MAX_LIMIT;
const MONGO_INC_THROTTLED_INTERVAL_MILLIS = 5000;
/**
 * Dictionary of APIFY_XXX environment variable names.
 */

exports.MONGO_INC_THROTTLED_INTERVAL_MILLIS = MONGO_INC_THROTTLED_INTERVAL_MILLIS;
const ENV_VARS = {
  IS_AT_HOME: 'APIFY_IS_AT_HOME',
  ACTOR_ID: 'APIFY_ACTOR_ID',
  ACTOR_RUN_ID: 'APIFY_ACTOR_RUN_ID',
  ACTOR_TASK_ID: 'APIFY_ACTOR_TASK_ID',
  INPUT_KEY: 'APIFY_INPUT_KEY',
  USER_ID: 'APIFY_USER_ID',
  TOKEN: 'APIFY_TOKEN',
  PROXY_PASSWORD: 'APIFY_PROXY_PASSWORD',
  PROXY_HOSTNAME: 'APIFY_PROXY_HOSTNAME',
  PROXY_PORT: 'APIFY_PROXY_PORT',
  STARTED_AT: 'APIFY_STARTED_AT',
  TIMEOUT_AT: 'APIFY_TIMEOUT_AT',
  DEFAULT_KEY_VALUE_STORE_ID: 'APIFY_DEFAULT_KEY_VALUE_STORE_ID',
  DEFAULT_DATASET_ID: 'APIFY_DEFAULT_DATASET_ID',
  DEFAULT_REQUEST_QUEUE_ID: 'APIFY_DEFAULT_REQUEST_QUEUE_ID',
  LOCAL_STORAGE_DIR: 'APIFY_LOCAL_STORAGE_DIR',
  API_BASE_URL: 'APIFY_API_BASE_URL',
  HEADLESS: 'APIFY_HEADLESS',
  XVFB: 'APIFY_XVFB',
  MEMORY_MBYTES: 'APIFY_MEMORY_MBYTES',
  LOG_LEVEL: 'APIFY_LOG_LEVEL',
  ACTOR_EVENTS_WS_URL: 'APIFY_ACTOR_EVENTS_WS_URL',
  CHROME_EXECUTABLE_PATH: 'APIFY_CHROME_EXECUTABLE_PATH',
  CONTAINER_PORT: 'APIFY_CONTAINER_PORT',
  CONTAINER_URL: 'APIFY_CONTAINER_URL',
  META_ORIGIN: 'APIFY_META_ORIGIN',
  FACT: 'APIFY_FACT',
  DEDICATED_CPUS: 'APIFY_DEDICATED_CPUS',
  SDK_LATEST_VERSION: 'APIFY_SDK_LATEST_VERSION',
  // Deprecated, keep them for backward compatibility:
  ACT_ID: 'APIFY_ACT_ID',
  ACT_RUN_ID: 'APIFY_ACT_RUN_ID'
};
exports.ENV_VARS = ENV_VARS;
const INTEGER_ENV_VARS = [ENV_VARS.PROXY_PORT, ENV_VARS.INTERNAL_PORT, ENV_VARS.MEMORY_MBYTES, ENV_VARS.CONTAINER_PORT];
/**
 * Default value for APIFY_CONTAINER_PORT used both locally and at Apify platform.
 */

exports.INTEGER_ENV_VARS = INTEGER_ENV_VARS;
const DEFAULT_CONTAINER_PORT = 4321;
/**
 * Local emulation sub directories for local stores
 */

exports.DEFAULT_CONTAINER_PORT = DEFAULT_CONTAINER_PORT;
const LOCAL_STORAGE_SUBDIRS = {
  datasets: 'datasets',
  keyValueStores: 'key_value_stores',
  requestQueues: 'request_queues'
};
/**
 * Local defaults for of some of the environment variables.
 * These are being preset in Apify SDK when it's running out of the Apify platform.
 */

exports.LOCAL_STORAGE_SUBDIRS = LOCAL_STORAGE_SUBDIRS;
const LOCAL_ENV_VARS = {
  [ENV_VARS.DEFAULT_KEY_VALUE_STORE_ID]: 'default',
  [ENV_VARS.DEFAULT_DATASET_ID]: 'default',
  [ENV_VARS.DEFAULT_REQUEST_QUEUE_ID]: 'default',
  [ENV_VARS.PROXY_HOSTNAME]: 'proxy.apify.com',
  [ENV_VARS.PROXY_PORT]: 8000 .toString(),
  [ENV_VARS.CONTAINER_PORT]: DEFAULT_CONTAINER_PORT.toString(),
  [ENV_VARS.CONTAINER_URL]: `http://localhost:${DEFAULT_CONTAINER_PORT}` // Must match port line above!

};
/**
 * Defaults input and output key-value stores keys
 */

exports.LOCAL_ENV_VARS = LOCAL_ENV_VARS;
const KEY_VALUE_STORE_KEYS = {
  INPUT: 'INPUT',
  OUTPUT: 'OUTPUT'
};
/**
 * Max length of Actor log in number of characters.
 * TODO: Remove this once it's no longer used anywhere.
 */

exports.KEY_VALUE_STORE_KEYS = KEY_VALUE_STORE_KEYS;
const ACTOR_LOG_MAX_CHARS = ACTOR_LIMITS.LOG_MAX_CHARS;
/**
 * Types of customer request.
 */

exports.ACTOR_LOG_MAX_CHARS = ACTOR_LOG_MAX_CHARS;
const CUSTOMER_REQUEST_TYPES = {
  EXTRACT_DATA: 'EXTRACT_DATA',
  AUTOMATION: 'AUTOMATION',
  OTHER: 'OTHER'
};
/**
 * Represents the maximum size in bytes of a request body (decompressed)
 * that will be accepted by the App and API servers.
 */

exports.CUSTOMER_REQUEST_TYPES = CUSTOMER_REQUEST_TYPES;
const MAX_PAYLOAD_SIZE_BYTES = 9437184; // 9MB

/**
 * Categories for crawlers and actors
 */

exports.MAX_PAYLOAD_SIZE_BYTES = MAX_PAYLOAD_SIZE_BYTES;
const ACTOR_CATEGORIES = {
  TRAVEL: 'Travel',
  ECOMMERCE: 'E-commerce',
  ENTERTAINMENT: 'Entertainment',
  SOCIAL: 'Social',
  MARKETING: 'Marketing',
  NEWS: 'News',
  FINANCE: 'Finance',
  LIFESTYLE: 'Lifestyle',
  SEARCH_ENGINES: 'Search engines',
  DATA: 'Data processing',
  EGOVERNMENT: 'E-government',
  TOOLS: 'Tools',
  EXAMPLES: 'Examples',
  OTHER: 'Other'
};
/**
 * Bases for converting version/build number to/from string/integer
 */

exports.ACTOR_CATEGORIES = ACTOR_CATEGORIES;
const VERSION_INT_MAJOR_BASE = 1e7;
exports.VERSION_INT_MAJOR_BASE = VERSION_INT_MAJOR_BASE;
const VERSION_INT_MINOR_BASE = 1e5;
/**
 * Basic options for XSS sanitization
 */

exports.VERSION_INT_MINOR_BASE = VERSION_INT_MINOR_BASE;
const USER_BASIC_TEXT_XSS_OPTIONS = {
  whiteList: {
    a: ['href', 'title', 'target'],
    code: [],
    strong: [],
    b: [],
    br: [],
    ul: [],
    li: [],
    ol: [],
    i: [],
    u: [],
    p: []
  }
};
exports.USER_BASIC_TEXT_XSS_OPTIONS = USER_BASIC_TEXT_XSS_OPTIONS;
const WEBHOOK_EVENT_TYPES = {
  ACTOR_RUN_CREATED: 'ACTOR.RUN.CREATED',
  ACTOR_RUN_SUCCEEDED: 'ACTOR.RUN.SUCCEEDED',
  ACTOR_RUN_FAILED: 'ACTOR.RUN.FAILED',
  ACTOR_RUN_TIMED_OUT: 'ACTOR.RUN.TIMED_OUT',
  ACTOR_RUN_ABORTED: 'ACTOR.RUN.ABORTED',
  TEST: 'TEST'
};
exports.WEBHOOK_EVENT_TYPES = WEBHOOK_EVENT_TYPES;
const WEBHOOK_EVENT_TYPE_GROUPS = {
  ACTOR_RUN: [WEBHOOK_EVENT_TYPES.ACTOR_RUN_CREATED, WEBHOOK_EVENT_TYPES.ACTOR_RUN_SUCCEEDED, WEBHOOK_EVENT_TYPES.ACTOR_RUN_FAILED, WEBHOOK_EVENT_TYPES.ACTOR_RUN_TIMED_OUT, WEBHOOK_EVENT_TYPES.ACTOR_RUN_ABORTED],
  // If one of these occurs then we can be sure that none other can occur for the same triggerer.
  ACTOR_RUN_TERMINAL: [WEBHOOK_EVENT_TYPES.ACTOR_RUN_SUCCEEDED, WEBHOOK_EVENT_TYPES.ACTOR_RUN_FAILED, WEBHOOK_EVENT_TYPES.ACTOR_RUN_TIMED_OUT, WEBHOOK_EVENT_TYPES.ACTOR_RUN_ABORTED]
};
exports.WEBHOOK_EVENT_TYPE_GROUPS = WEBHOOK_EVENT_TYPE_GROUPS;
const WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE = `{
    "userId": {{userId}},
    "createdAt": {{createdAt}},
    "eventType": {{eventType}},
    "eventData": {{eventData}},
    "resource": {{resource}}
}`;
exports.WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE = WEBHOOK_DEFAULT_PAYLOAD_TEMPLATE;
const WEBHOOK_ALLOWED_PAYLOAD_VARIABLES = new Set(['userId', 'createdAt', 'eventType', 'eventData', 'resource']); // This client key is used in request queue to indentify requests from Apify app UI.

exports.WEBHOOK_ALLOWED_PAYLOAD_VARIABLES = WEBHOOK_ALLOWED_PAYLOAD_VARIABLES;
const APIFY_UI_CLIENT_KEY = 'apify-app-ui'; // Max allowed size of files in multi-file editor

exports.APIFY_UI_CLIENT_KEY = APIFY_UI_CLIENT_KEY;
const MAX_MULTIFILE_BYTES = 3 * 1024 ** 2; // 3MB
// Formats for multi-file editor files

exports.MAX_MULTIFILE_BYTES = MAX_MULTIFILE_BYTES;
const SOURCE_FILE_FORMATS = {
  TEXT: 'TEXT',
  BASE64: 'BASE64'
}; // Marketplace project statuses

exports.SOURCE_FILE_FORMATS = SOURCE_FILE_FORMATS;
const PROJECT_STATUSES = {
  REQUEST: 'REQUEST',
  SPECIFICATION: 'SPECIFICATION',
  OFFERS: 'OFFERS',
  DEPOSIT: 'DEPOSIT',
  DEPOSIT_PAID: 'DEPOSIT_PAID',
  NEW: 'NEW',
  IN_PROGRESS: 'IN_PROGRESS',
  QA: 'QA',
  CUSTOMER_QA: 'CUSTOMER_QA',
  READY_FOR_INVOICE: 'READY_FOR_INVOICE',
  INVOICED: 'INVOICED',
  PAID: 'PAID',
  DELIVERED: 'DELIVERED',
  CLOSED: 'CLOSED',
  FINISHED: 'FINISHED'
}; // Marketplace projects with status from this array is considered as successfully finished

exports.PROJECT_STATUSES = PROJECT_STATUSES;
const FINISHED_PROJECT_STATUSES = [PROJECT_STATUSES.READY_FOR_INVOICE, PROJECT_STATUSES.INVOICED, PROJECT_STATUSES.PAID, PROJECT_STATUSES.DELIVERED, PROJECT_STATUSES.FINISHED];
exports.FINISHED_PROJECT_STATUSES = FINISHED_PROJECT_STATUSES;
const MARKETPLACE_USER_ROLES = {
  DEVELOPER: 'DEVELOPER',
  DATA_EXPERT: 'DATA_EXPERT',
  CUSTOMER: 'CUSTOMER'
};
exports.MARKETPLACE_USER_ROLES = MARKETPLACE_USER_ROLES;