"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.limitDepth = exports.getLevelFromEnv = void 0;

var _underscore = _interopRequireDefault(require("underscore"));

var _utilities = require("./utilities.client");

var _consts = require("./consts");

var _log_consts = require("./log_consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets log level from env variable.
 * Both integers and strings (WARNING) are supported.
 */
const getLevelFromEnv = () => {
  const envVar = process.env[_consts.ENV_VARS.LOG_LEVEL];
  if (!envVar) return _log_consts.LEVELS.INFO;
  if (_log_consts.LEVELS[envVar]) return _log_consts.LEVELS[envVar];
  return parseInt(envVar, 10);
};
/**
* Limits given object to given depth.
*
* ie. Replaces object's content by '[object]' and array's content
* by '[array]' when the value is nested more than given limit.
*/


exports.getLevelFromEnv = getLevelFromEnv;

const limitDepth = (record, depth, maxStringLength) => {
  // handle common cases quickly
  const type = typeof record;

  if (type === 'string') {
    return record.length > maxStringLength ? (0, _utilities.truncate)(record, maxStringLength) : record;
  }

  if (type === 'number' || type === 'boolean' || record === null || record === undefined || _underscore.default.isDate(record)) return record; // WORKAROUND: Error's properties are not iterable, convert it to a simple object and preserve custom properties
  // NOTE: _.isError() doesn't work on Match.Error

  if (record instanceof Error) {
    record = _underscore.default.extend({
      name: record.name,
      message: record.message,
      stack: record.stack
    }, record);
  }

  const nextCall = _underscore.default.partial(limitDepth, _underscore.default, depth - 1, maxStringLength);

  if (_underscore.default.isArray(record)) return depth ? _underscore.default.map(record, nextCall) : '[array]';
  if (_underscore.default.isObject(record)) return depth ? _underscore.default.mapObject(record, nextCall) : '[object]'; // this shouldn't happen

  console.log(`WARNING: Object cannot be logged: ${record}`);
  return undefined;
};

exports.limitDepth = limitDepth;