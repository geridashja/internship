"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _underscore = _interopRequireDefault(require("underscore"));

var _chalk = _interopRequireDefault(require("chalk"));

var _logger = _interopRequireDefault(require("./logger"));

var _log_consts = require("./log_consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const SHORTEN_LEVELS = {
  SOFT_FAIL: 'SFAIL',
  WARNING: 'WARN'
};
const LEVEL_TO_COLOR = {
  [_log_consts.LEVELS.ERROR]: 'red',
  [_log_consts.LEVELS.SOFT_FAIL]: 'red',
  [_log_consts.LEVELS.WARNING]: 'yellow',
  [_log_consts.LEVELS.INFO]: 'green',
  [_log_consts.LEVELS.DEBUG]: 'blue',
  [_log_consts.LEVELS.PERF]: 'magenta'
};

const SHORTENED_LOG_LEVELS = _log_consts.LEVEL_TO_STRING.map(level => SHORTEN_LEVELS[level] || level);

const MAX_LEVEL_LENGTH_SPACES = Math.max(...SHORTENED_LOG_LEVELS.map(l => l.length));

const getLevelIndent = level => {
  let spaces = '';

  for (let i = 0; i < MAX_LEVEL_LENGTH_SPACES - level.length; i++) spaces += ' ';

  return spaces;
};

const DEFAULT_OPTIONS = {
  skipTime: true
};

class LoggerText extends _logger.default {
  constructor(options = {}) {
    super(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options));
  }

  _log(level, message, data, exception, opts = {}) {
    let {
      prefix,
      suffix
    } = opts;
    let maybeDate = '';

    if (!this.options.skipTime) {
      maybeDate = `${new Date().toISOString().replace('Z', '').replace('T', ' ')} `;
    }

    const errStack = exception ? this._parseException(exception) : '';
    const color = LEVEL_TO_COLOR[level];
    const levelStr = SHORTENED_LOG_LEVELS[level];
    const levelIndent = getLevelIndent(levelStr);
    const dataStr = _underscore.default.isEmpty(data) ? '' : ` ${JSON.stringify(data)}`;
    prefix = prefix ? ` ${prefix}${_log_consts.PREFIX_DELIMITER}` : '';
    suffix = suffix ? ` ${suffix}` : '';
    const line = (0, _chalk.default)`{gray ${maybeDate}}{${color} ${levelStr}}${levelIndent}{yellow ${prefix}} ${message || ''}{gray ${dataStr}}{yellow ${suffix}}${errStack}`; // eslint-disable-line

    this._outputWithConsole(level, line);

    return line;
  }

  _parseException(exception) {
    let errStack = ''; // Parse error.type and error.details from ApifyClientError.

    const errDetails = [];
    if (exception.type) errDetails.push(`type=${exception.type}`);

    if (exception.details) {
      _underscore.default.chain(exception.details).mapObject((val, key) => errDetails.push(`${key}=${val}`));
    } // Parse error stack lines.
    // NOTE: Reason is here to support Meteor.js like errors.


    let errorLines = exception.stack || exception.reason || exception.toString();
    errorLines = errorLines.split('\n'); // Add details to a first line.

    if (errDetails.length) errorLines[0] += (0, _chalk.default)`{gray (details: ${errDetails.join(', ')})}`; // Compose it back.

    errStack = errorLines.map(line => `  ${line}`).join('\n');
    errStack = `\n${errStack}`;
    return errStack;
  }

}

exports.default = LoggerText;
module.exports = exports.default;