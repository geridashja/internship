"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apifyMarked = void 0;

var _marked = _interopRequireDefault(require("marked"));

var _matchAll = _interopRequireDefault(require("match-all"));

var _markdown_renderers = require("./markdown_renderers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Map from the language of a fenced code block to the title of corresponding tab.
 * The language is a string provided by the default marked tokenizer.
 * Note that not all of the languages (such as python2) might be possible at the moment
 * in the default marked tokenizer. We anyway include them here for
 * robustness to potential future improvements of marked.
 * In case tab title can't be resolved from language using this mapping, the language itself is used as a tab title.
 */
const LANGUAGE_TO_TAB_TITLE = {
  js: 'Node.JS',
  javascript: 'Node.js',
  nodejs: 'Node.js',
  bash: 'Bash',
  curl: 'cURL',
  dockerfile: 'Dockerfile',
  php: 'PHP',
  json: 'JSON',
  xml: 'XML',
  python: 'Python',
  python2: 'Python 2',
  python3: 'Python 3',
  yml: 'YAML',
  yaml: 'YAML'
};
const APIFY_CODE_TABS = 'apify-code-tabs';
const DEFAULT_MARKED_RENDERER = new _marked.default.Renderer();
/**
 * @param {string} markdown
 * @return { Object.<string, {language: string, code: string}> } tabs
 */

const codeTabObjectFromCodeTabMarkdown = markdown => {
  const matchesIterator = (0, _matchAll.default)(markdown, /<marked-tab header="(?<header>.*?)" lang="(?<lang>.*?)">(?<code>.*?)<\/marked-tab>/sg);
  const matches = [];
  let nextMatch = matchesIterator.nextRaw();

  while (nextMatch) {
    matches.push(nextMatch);
    nextMatch = matchesIterator.nextRaw();
  }

  const tabs = {};

  for (const match of matches) {
    const {
      header,
      lang
    } = match.groups;
    tabs[header] = {
      language: lang,
      code: match.groups.code.trim()
    };
  }

  return tabs;
};
/**
 * This custom function is used in the same context as default `marked` function.
 *
 * It parses the given markdown and treats some headings and code blocks in a custom way
 * -----------------------------------------------------------------------------------------------
 * 0. Heading with {custom-id} in text will have id="custom-id" property on reasulting <h...> tag.
 * E.g.
 * # Welcome to Apify {welcome-title-id}
 * is turned to
 * <h1 id="welcome-title-id">Welcome to Apify</h1>
 * -----------------------------------------------------------------------------------------------
 * 1. Fenced code block with explicit language which is in the mapping LANGUAGE_TO_TAB_TITLE
 * ```my-lang
 * my-code
 * ```
 *  This block is turned into [apify-code-tabs]$INDEX[/apify-code-tabs] in returned HTML
 *  and returned codeTabsObjectPerIndex contains key $INDEX with value
 *  {
 *      LANGUAGE_TO_TAB_TITLE[my-lang]: { lang: 'my-lang', code: 'my-code' }
 *  }
 * -----------------------------------------------------------------------------------------------
 * 2. Fenced code block with explicit language which is NOT in the mapping LANGUAGE_TO_TAB_TITLE
 * ```my-lang-not-in-mapping
 * my-code
 * ```
 *  This block is turned into [apify-code-tabs]$INDEX[/apify-code-tabs] in returned HTML
 *  and returned codeTabsObjectPerIndex contains key $INDEX with value
 *  {
 *      my-lang-not-in-mapping: { lang: 'my-lang-not-in-mapping', code: 'my-code' }
 *  }
 * -----------------------------------------------------------------------------------------------
 * 3. Fenced code block with no language
 * ```
 * my-code
 * ```
 *
 * is handled by default marked package and returned in HTML already parsed to <code> block.
 * -----------------------------------------------------------------------------------------------
 * 4. Indented code block
 *      my-code
 *
 * is handled by default marked package and returned in HTML already parsed to <code> block.
 * -----------------------------------------------------------------------------------------------
 * 5. Special marked-tabs code fence
 * Each code block of following form
 * ```marked-tabs
 * <marked-tab header="Node.js" lang="javascript">
 * js-code
 * </marked-tab>
 *
 * <marked-tab header="Python" lang="python">
 * python-code
 * </marked-tab>
 * ```
 * is replaced by [apify-code-tabs]$INDEX[/apify-code-tabs] in the returned HTML where $INDEX is
 * an unique integer, to allow multiple marked-tabs components on the same page.
 *
 * For the example above codeTabsObjectPerIndex would contain key $INDEX with the following value
 * {
 *      'Node.js': {lang: 'javascript', code: 'js-code'},
 *      'Python': {lang: 'python', code: 'python-code'}
 * }
 *
 * i.e. each <marked-tab header="HEADER" lang="LANG">CODE</marked-tab> is turned into
 * HEADER: {lang: LANG, code: CODE} entry.
 *
 * Note that you have to use double quotation marks around HEADER and LANG, otherwise, the expression will not be matched
 * which results in unexpected and hard to debug errors.
 *
 * Each [apify-code-tabs]$INDEX[/apify-code-tabs] is meant to be later replaced be a react component
 * rendering the appropriate codeTabBlockObject returned by this function.
 * @param {string} markdown
 * @return {{ html: string, codeTabsObjectPerIndex: Object.<number, Object.<string, {language: string, code: string}>> }}
 */


const apifyMarked = markdown => {
  const renderer = new _marked.default.Renderer();
  renderer.heading = _markdown_renderers.customHeadingRenderer;

  renderer.code = (code, language) => {
    if (language) {
      return code;
    }

    return DEFAULT_MARKED_RENDERER.code(code, language);
  };

  const tokens = _marked.default.lexer(markdown);

  let markedTabTokenIndex = 0;
  const codeTabsObjectPerIndex = {};
  tokens.forEach(token => {
    if (token.type === 'code' && token.lang) {
      if (token.lang === 'marked-tabs') {
        codeTabsObjectPerIndex[markedTabTokenIndex] = codeTabObjectFromCodeTabMarkdown(token.text);
      } else {
        const tabTitle = LANGUAGE_TO_TAB_TITLE[token.lang] || token.lang;
        codeTabsObjectPerIndex[markedTabTokenIndex] = {
          [tabTitle]: {
            language: token.lang,
            code: token.text
          }
        };
      }

      token.text = `[${APIFY_CODE_TABS}]${markedTabTokenIndex}[/${APIFY_CODE_TABS}]`;
      markedTabTokenIndex++;
    }
  });

  const html = _marked.default.parser(tokens, {
    renderer
  });

  return {
    html,
    codeTabsObjectPerIndex
  };
};

exports.apifyMarked = apifyMarked;